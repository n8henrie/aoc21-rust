var searchIndex = JSON.parse('{\
"aoc":{"doc":"","t":[0,14,14],"n":["files","localpath","parse_input"],"q":["aoc","",""],"d":["","Return a path to the input, starting at <code>CARGO_MANIFEST_DIR</code> …","Parse input into a vec of specified type, or default to …"],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"d01":{"doc":"","t":[5,5,5,5],"n":["main","parse_input","part1","part2"],"q":["d01","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[],["result",6]],[[["str",0]],["result",6,[["vec",3,[["u32",0]]]]]],[[],["usize",0]],[[],["usize",0]]],"p":[]},\
"d02":{"doc":"","t":[12,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,12,12,12],"n":["0","Direction","Directions","Down","Forward","Up","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","from","from","from_str","from_str","into","into","iter","main","ne","part1","part2","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0"],"q":["d02","","","","","","","","","","","","","","","","","","","","","","","","","","","","","d02::Direction","",""],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[1,0,0,2,2,2,1,2,1,2,2,2,1,2,1,2,1,2,1,0,2,0,0,1,2,1,2,1,2,3,4,5],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["direction",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["result",6]],[[["str",0]],["result",4]],[[]],[[]],[[["",0]]],[[],["result",6]],[[["",0],["direction",4]],["bool",0]],[[["directions",3]],["i32",0]],[[["directions",3]],["i32",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null],"p":[[3,"Directions"],[4,"Direction"],[13,"Forward"],[13,"Up"],[13,"Down"]]},\
"d03":{"doc":"","t":[12,12,3,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,5,5,11,11,11,5,11,5,5,11,11,11,11,11,11,11],"n":["0","0","Report","ReportNumber","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","filter_rows","fmt","from","from","from","from_binary","from_str","get_co2_rating","get_o2_rating","into","into","iter","main","ne","part1","part2","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["d03","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[1,2,0,0,1,2,1,2,1,2,2,2,2,0,2,1,1,2,0,2,0,0,1,2,1,0,2,0,0,2,1,2,1,2,1,2],"f":[null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["reportnumber",3]],[[["",0],["",0]]],[[["",0],["reportnumber",3]],["bool",0]],[[["bool",0]],["usize",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",6,[["u32",0]]]],[[["str",0]],["result",6]],[[["report",3]],["result",6,[["u32",0]]]],[[["report",3]],["result",6,[["u32",0]]]],[[]],[[]],[[["",0]]],[[],["result",6]],[[["",0],["reportnumber",3]],["bool",0]],[[["report",3]],["result",6,[["u32",0]]]],[[["report",3]],["result",6,[["u32",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Report"],[3,"ReportNumber"]]},\
"d04":{"doc":"","t":[12,3,3,13,4,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["0","BingoBoard","BingoGame","Marked","Number","Unmarked","boards","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from","from_str","from_str","into","into","into","is_winner","main","ne","ne","numbers","parse_game","part1","part2","play","play","score","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0"],"q":["d04","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","d04::Number",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,2,0,2,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,2,1,3,1,3,2,1,3,1,0,2,1,3,0,0,0,1,3,1,2,1,3,2,1,3,2,1,3,2,1,3,4,5],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["number",4]],[[["",0]],["bingoboard",3]],[[["",0]],["bingogame",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["number",4]],["bool",0]],[[["",0],["bingoboard",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[],["result",6]],[[["",0],["number",4]],["bool",0]],[[["",0],["bingoboard",3]],["bool",0]],null,[[["str",0]],["result",6,[["bingogame",3]]]],[[["bingogame",3]],["option",4,[["u32",0]]]],[[["bingogame",3]],["option",4,[["u32",0]]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]],["u32",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[3,"BingoBoard"],[4,"Number"],[3,"BingoGame"],[13,"Marked"],[13,"Unmarked"]]},\
"d05":{"doc":"","t":[12,12,3,3,3,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,12,12,11,11,11,11,11,11,11,11,11,11],"n":["0","0","Diagram","Line","Point","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","delta","eq","eq","fmt","fmt","from","from","from","from_str","from_str","into","into","into","iter","main","ne","ne","new","parse_input","solve","start","stop","traverse","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["d05","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,0,1,2,3,1,2,3,0,2,3,2,3,1,2,3,2,3,1,2,3,1,0,2,3,1,0,0,3,3,3,1,2,3,1,2,3,1,2,3],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["point",3]],["bool",0]],[[["",0],["line",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[]],[[]],[[]],[[["",0]]],[[],["result",6]],[[["",0],["point",3]],["bool",0]],[[["",0],["line",3]],["bool",0]],[[["vec",3,[["line",3]]],["point",3],["bool",0]]],[[["str",0],["bool",0]],["result",6,[["diagram",3]]]],[[["diagram",3]],["u32",0]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Diagram"],[3,"Point"],[3,"Line"]]},\
"d06":{"doc":"","t":[5,5,5,5],"n":["main","parse_input","recurse","solve"],"q":["d06","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[],["result",6]],[[["str",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["u32",0],["u8",0],["hashmap",3]],["u64",0]],[[["u32",0],["hashmap",3]],["u64",0]]],"p":[]},\
"d07":{"doc":"","t":[5,5,5,5],"n":["main","parse_input","part1","part2"],"q":["d07","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[],["result",6]],[[["str",0]],["result",6,[["vec",3,[["i32",0]]]]]],[[],["result",6,[["u32",0]]]],[[],["result",6,[["u32",0]]]]],"p":[]},\
"d08":{"doc":"","t":[12,3,4,13,13,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,12],"n":["0","AnswerKey","Display","Solved","Unsolved","base_known_map","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decode_numbers","eq","find_word_for","fmt","fmt","from","from","get","into","into","iter","main","ne","new","part1","part2","solve","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0"],"q":["d08","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","d08::Display"],"d":["","","","","","Generate defaults based on the number of segments in a “…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,0,0,2,2,0,1,2,1,2,2,2,0,2,1,1,2,1,2,1,1,2,1,0,2,1,0,0,1,2,1,2,1,2,1,2,3],"f":[null,null,null,null,null,[[],["hashmap",3,[["u8",0],["display",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["display",4]],[[["",0],["",0]]],[[["str",0]],["result",6,[["answerkey",3]]]],[[["",0],["display",4]],["bool",0]],[[["",0],["u8",0]],["option",4,[["btreeset",3,[["char",0]]]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["option",4,[["display",4]]]],[[]],[[]],[[["",0]]],[[],["result",6]],[[["",0],["display",4]],["bool",0]],[[],["result",6]],[[],["usize",0]],[[],["result",6,[["u32",0]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[3,"AnswerKey"],[4,"Display"],[13,"Solved"]]},\
"d09":{"doc":"","t":[12,4,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,12,12,12,12],"n":["0","AocError","BadArray","BadDigit","BadU8","Map","NotEnoughBasins","basins","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","from_str","get","into","into","items","low_points","main","neighbors","part1","part2","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","arr_length","length","source"],"q":["d09","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","d09::AocError","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","get the value at index (x, y)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[1,0,2,2,2,0,2,1,1,2,1,2,2,2,1,2,1,1,1,2,1,1,0,1,0,0,2,2,1,2,1,2,1,2,3,4,4,5],"f":[null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["result",4]],[[["",0]],["option",4,[["u8",0]]]],[[]],[[]],[[["",0]]],[[["",0]]],[[],["result",4,[["aocerror",4]]]],[[["",0]]],[[["map",3]],["u32",0]],[[["map",3]],["result",4,[["u32",0],["aocerror",4]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null],"p":[[3,"Map"],[4,"AocError"],[13,"BadDigit"],[13,"BadArray"],[13,"BadU8"]]},\
"d10":{"doc":"","t":[12,12,12,12,13,4,13,3,3,13,13,4,3,13,3,13,13,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["0","0","0","0","Angled","AocErr","BadInput","BadInputErr","ChunkPoint","Closing","Curly","Direction","Line","Matching","MatchingErr","Opening","PrematureClosing","PrematureClosingErr","Round","Square","Style","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","expected","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","found","from","from","from","from","from","from","from","from","from","from","from","from_str","get_completion","into","into","into","into","into","into","into","into","main","parse","parse_input","part1","part2","points_map","points_map2","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0"],"q":["d10","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","d10::AocErr","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,4,5,0,6,0,0,7,5,0,0,6,0,7,6,0,5,5,0,7,5,1,2,6,8,3,4,7,5,1,2,6,8,3,4,7,5,1,7,5,1,7,5,8,7,5,1,1,2,6,6,8,3,4,8,7,5,1,2,6,6,6,6,8,3,4,2,2,7,5,1,2,6,8,3,4,0,2,0,0,0,0,0,7,5,1,1,6,7,5,1,2,6,8,3,4,7,5,1,2,6,8,3,4,7,5,1,2,6,8,3,4,9,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["direction",4]],[[["",0]],["style",4]],[[["",0]],["chunkpoint",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["direction",4]],["bool",0]],[[["",0],["style",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[["badinputerr",3]]],[[["matchingerr",3]]],[[["prematureclosingerr",3]]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["aocerr",4]]]],[[["",0]],["result",4,[["vec",3,[["chunkpoint",3]]],["aocerr",4]]]],[[["str",0]],["result",4,[["vec",3,[["line",3]]],["aocerr",4]]]],[[],["result",4,[["u32",0],["aocerr",4]]]],[[],["u64",0]],[[],["hashmap",3,[["char",0],["u32",0]]]],[[],["hashmap",3,[["char",0],["u32",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null],"p":[[3,"ChunkPoint"],[3,"Line"],[3,"BadInputErr"],[3,"PrematureClosingErr"],[4,"Style"],[4,"AocErr"],[4,"Direction"],[3,"MatchingErr"],[13,"Matching"],[13,"PrematureClosing"],[13,"BadInput"]]},\
"d11":{"doc":"","t":[12,13,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["0","Flashed","Octopi","Octopus","Position","Unflashed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","enumerate_mut","eq","flash_count","fmt","fmt","from","from","from","from_str","hash","into","into","into","main","ne","neighbor_positions","part1","part2","reset_flashed","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","x","y","0"],"q":["d11","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","d11::Octopus"],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,0,2,2,1,3,2,1,3,3,3,1,3,1,1,3,2,1,3,1,3,2,1,3,0,3,1,0,0,1,3,1,2,1,3,2,1,3,2,1,3,3,3,4],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["position",3]],[[["",0],["",0]]],[[["",0]]],[[["",0],["position",3]],["bool",0]],[[["",0]],["u32",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["",0],["",0]]],[[]],[[]],[[]],[[],["result",6]],[[["",0],["position",3]],["bool",0]],[[["position",3]]],[[["octopi",3],["usize",0]],["u32",0]],[[["octopi",3]],["u32",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null],"p":[[3,"Octopi"],[4,"Octopus"],[3,"Position"],[13,"Unflashed"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};